-------------------------------------------------
                HTML - Hyper Text Markup Languauge
        -------------------------------------------------

        1. Markup Languauge : 
        2. HTML - used to display contents in webpage
        3. HTML documents - collection of HTML Elements
            - HTML Elements : starting-tag,content,ending-tag
                - starting tag : content in <tag-name>
                - ending tag : 
                ex: <tag-name>content</tag-name>
            - Structure Of HTML
                <html>
                    <head>
                        <title> title </title>
                    </head>
                    <body>
                        contents to be displays in webpage
                    </body>
                </html>
        4. Latest Version of HTML : HTML5
        5. Basic Tags : used to display content in webpage
            - Headings : h1-h6 tags
            - paragraph - p tag
            - Text formatting tags
                - bold - b tag
                - Italics - i tag / em tag
                - highlight - mark tag
                - strikeout content - s tag
                - superlative content - sup tag
                - subscript content - sub tag
            - links - anchor / a tag
                - href : hyperReference Text ()
            - List
                - Ordered List - ol tag, li tag
                - Unordered list - ul tag, li tag
            - Table : table tag
                - thead tag : table head
                - tbody tag : table body
                - tr tag : row
                - th tag / td tag : column
            - img tag : image
                - src : source file
                - alt : alternative text
            - video tag
            - break : br tag
            - Containers tag 
                - div tag
                - section tag
                - article tag
            - iframe tag - EMbeding content in a webpage
            - form tag 
                - input tag : user can input data
                    - text, number, date, 
                - Check box
                - dropdown
                - Radio Button
                - Button
        6. Tags can be classified according to their display in browser
            - Block Elements : h1-h6 tag, p tag
            - Inline Elements : a tag
        7. Semantic Tags : describes its meaning  to both browser and developer
             - header tag
             - nav tag
             - section tag
             - article tag 
             - aside tag
             - footer tag

        -------------------------------------------------
                CSS - Cascading Style Sheet
        -------------------------------------------------

        1. used to give style to html elements
        2. Ways to apply CSS in html Elements
            - Inline CSS : use style attribute
                - syntax : style="property:value;"
            - Internal CSS : use style tag
                - syntax : <style>
                                selectors{
                                    property:value;
                                }
                           </style>
            - External CSS : use External css file, we have to link css file to html file
                - syntax :  selectors{
                                    property:value;
                                }
        3. Selectors : used to select html elements into css 
            - tag name
            - id 
            - class name
            - universal selector (*)
            - CSS combinators : used multiple selectors to select html elements in css
                - child selctor : space or >
                - all sibling selector : ~
                - immeadiate sibling selector : +
            - Grouping selectors : select multiple html elements by seperating  by commas
        4. Box Model : every html elements are wrapped in rectangular boxes in browser
            - Margin : space between browser width and border
            - Border
            - Padding : space between content and border
        5. CSS property
            - Float 
            - Position :
                - Static
                - fixed
                - sticky
                - relative
                - absolute
            - z-index : To manage order of overlapping elements
            - Flex : used to display items in row & columns
                - Flex Container
                    - justify-content
                    - align-items
                    - flex-direction
                    - flex-wrap
                    - gap
                - Flex items
            - Grid : used to display items in row & columns
            - Pseudo class : 
        6. Media Queries : To build responsive site in css
        

        -------------------------------------------------
                BOOTSTRAP : CSS FRAMEWORK
        -------------------------------------------------
        1. Build fast, responsive sites
        2. Basic class

        -------------------------------------------------
                TAILWIND : CSS FRAMEWORK
        -------------------------------------------------

        -------------------------------------------------
                        GIT & GITHUB
        -------------------------------------------------

        -------------------------------------------------
                    FIGMA : DESIGNING TOOL
        -------------------------------------------------

        -------------------------------------------------
            JAVASCRIPT : Dynamically Typed Languauge
        -------------------------------------------------

    1. console.log(content) : display content
    2. Data types : typeof keyword to specify type of a data in js
        - common data types in js
           -primitive data types
            - number
            - string
            - boolean
            - undefined
          -Non-primitive data types  
            - object
            - Array
        - To join multiple type of data
            - using concantenation (+)
            - using template literals (`${variable-name}`)
    3. Variable : used to store data
        - 3 types Variable
            - using 'var' keyword
            - using 'const' keyword
            - using 'let' keyword
        - Difference between variables
        --------------------------------------------------------------------------
            var                         const                   let
        --------------------------------------------------------------------------
        1. keyword used is var          const keyword           let keyword
        2. value can be changed         value is constant       Value can be changed
        3. Global scope                 Block scope             Block scope
        4. Hoisted with value           Hoisted without value   Hoisted without value
    4. Hoisting : Moving declaration to the top of the code     
    5. Operators in JS
        - Assignment Operators : =
        - Arithmetic Operators : (+ - / x % **)
        - Relational Operators : (> < >= <= == === !=)
        - Logical Operators : && || !
                AND             OR              NOT
            ----------------------------------------------
            T && T = T         T || T = T       !T = F
            T && F = F         T || F = T       !F = T
            F && T = F         F || T = T
            F && F = F         F || F = F
        - Increment / Decrement Operators : (++ --)
        - Shorthand Operators (+= -=)
        - Ternary Operators (?:) :syntax - condition?true Statement:false Statement 
        - Truthy Operators (&&) : syntax - condition&&true Statement
        - Spread Operators (...): used to join iterating variables into a single iterating variable
        - Rest operator (...): used to get rest of the arguments in function into a single array
    6. Conditional Statement : taking decision based on condition 
        - if  Statement  : if(condition){ true Statement }
        - if - else Statement : if(condition){ true Statement }else{ false Statement }
        - else-if Ladder
        - Switch 
    7. Looping Statement : repeat same steps of codes
        - while loop : syntax -
            - initialise a variable
            - while(condition using initialised variable){
                step needed to repeated when while loop condition become true
                change variable used in condition
              }
        - for loop : syntax -
        for(initialise a variable;condition using initialised variable;change variable used in condition){
            step needed to repeated when for loop condition become true
        }
        - Nested Loop : A loop inside another loop, when inner loop complete then only outer loop completed
            outer-loop{
                inner-loop{
                    Statements
                }
            }
        - break Statement : to exit from loop
        - continue  Statement : to skip loop
    8. Function : used to perform specific task , all Function are hoisted
        - Function Definition : are used to define task to be performed
            - syntax : 
            function function-name(parameters...){
                steps to resolve the task
                retun Statement 
            }
        - Function call : used to execute / run function - syntax: function-name(arguments...)
        - Types of function :
            - Predefined function : ex: console.log()
            - Arrow function : const function-name = (parameters...)=>{steps to resolve the task}
            - Callback function : function Definition inside a function call
                 syntax : function-name(()=>{
                function Definition
            })
            - Anonymous function : nameless function are self excuting
            - Recurssive Function : A Function is called inside its own Definition
                const function-name = (parameters...)=>{
                    steps to resolve the task
                    function-name()
                    }
            - Nested function : Defining a function inside another function Definition, 
            - Closure property : In Nested function, child function can access both global and its parent variable
            - Currying Function : spliting the function of multiple argument as single argument function
    9. Array : used to store multiple value in a single variable
        - index : To access items in an array , array-name[index]
        - length : used to get total count of items in array
        - first item will be in index : 0
        - last item will be in index : array-name.length-1
        - type of array : object
        - Array Methods : array-name.method()
            - push() : insert data at the end of an array
            - unshift() : insert data at the starting of an array
            - pop() : remove item from end of an array
            - shift() : remove item from start of array
            - sort(callback) : used to arrange items in ascending / descending order in original array
            - toSorted(callback): used to arrange items in ascending / descending order in to a new array without changing original array
            - forEach(callback) : similar to for of loop
            - filter(callback) : Returns the array of elements  that meet the condition specified in a callback function.
            - find(callback) : Returns only single elements of the given array that meet the condition specified in a callback function.
            - reduce(callback) : Returns accumulated result (smallest/ largest / total) from an array after applying reduce function 
            - reduceRight(callback) : Returns accumulated result first (smallest/ largest / total) from an array after applying reduce function 
            - map(callback) : Returns new array with items after applying mapping function to the original array
            - some(callback) : Returns boolean based on the condition given in the call back function, it return true when any of the array item satisfy the condition
            - every(callback) : Returns boolean based on the condition given in the call back function, it return true when all array item satisfy the condition
            - flat(depth) : reduce to array dimensional according to the depth value. if depth == Infinity then we get one dimensional array
            - includes(item) : return boolean if the item is present in array or not
            - indexOf(item) : retun index of the given item, if item is not found the it return -1
            - splice(index,deletecount) : used to remove/relace items from an existing array
            - concat() : used to join 2 arrays
            - join() : used to retun array item as a single string
    10. String : Collection of characters
        - substring() : to get part of a string
        - slice() : to get part of string
        - toUpperCase() : 
        - toLowerCase()
        - startsWith()
        - endsWith()
        - trim()
        - includes()
        - split()
    11. Object : Used to stores multiple data as key value pairs inorder to understand the data properly,
        -  Data stored {key : value }
        -  To acces values from object   
              - Bracket Notation : object-name['key']
              - Dot Notation : object-name.key
        - To check a key is in object
              - use 'in' key word : key in object-name
              - hasOwnProperty(key): object-name.hasOwnProperty(key)     
        - To insert data in object
              - object-name['key'] = value
              - object-name.key = value    
        - To update value in object
              - object-name[key] = updated value        

    12. Object Oriented Programming (OOPs)
        - Basic Concepts
              - Object: Real world entity
                   - creation syntax: new class-name()
                   - used to call properties/methods outside class

              - Class:  Blue print of object
                   -  syntax: class class-name{
                    class property
                    class method
                    constructor(){
                    }
                   }
                   - constructor method: used to initialise class properties, to call constuctor we have to create object

              - Reference: this keyword   

        - Features
            - Inheritance:
                   - class based inheritance: using 'extends' keyword
                   - prototype inheritance: using '.__proto__' keyword     
            - Polymorphism: means having many forms
            - Abstraction: It only provides necessary data and hide the rest
            - Data hiding: same as abstraction
            - Encapsulation: Wrapping up of data under a single unit

    13. Error/exception handling in javascript
            - try-cache-finally block statements
                - try{
                    code may generate runtime error, should be given
                }catch(error){
                    catch block executes only when try block has rutime error
                    steps to resolving error should be given
                }finally{
                    code should be execute both try and catch cases
                }

                -----------------------
                    JS in Front end
                -----------------------
    1. Used to apply behaviour changes in html elements
    2. Ways to apply JS in html elements
        -  Internal JS: using script tags for writing js code inside html documents
        -  external JS: JS code will be in external js file and it added to the html documents 
                         using script tag along with its src attribute
    3. DOM (DOCUMENT OBJECT MODEL)
        -  Tree representation of html documents into browser
        -  Tree having only a single parent(root) and  childs
    4. Accessing HTML elements into JAVASCRIPT                     
        - using document object of JS
        - ways to acces html elements
            - using tag name : document.getElementByTagName('tag')
            - using id : document.getElementById('id')/ id
            - using class : document.getElementByClassName('class')
            - document.querySelector('#id')
            document.querySelectorAll('tag/#id/.class')
    5. Events : Events are occured in html elements and are triggered by user action
            - Mouse relates Events: click, hover, drag....
            - keyword related Events: key press button...
            - Touch related Events:
    6. Handling Events using JS : create a function to solve the Events in js, call the function in html
       elements when that Event occur, Event = function-call
            - <button onclick="function-name()">click/button>
    7. Access/update the html elements contents
            - innerHTML / innerText : tag-selector.innerHTML = update value
    8. Store data permenantly in a browser : (Data stored as key-value pairs)
            - Local storage : Data will store permenantly
            - Session storage : Data will store permenantly until  we close the tab
            - Methods 
                - add data : setItem(key,value)
                - get data : getItem(key,value)
                - remove data : removeItem(key)
                - clear all data : clear()
    9. Working of JS in browser
            - JS Engine : It handles javascript execution and it will converts js code to code that understood by browser 
            Engine (JS Engine used by Chrome - Blink or V8) 
                - Call Stack : Used to track currently executing function, Make sure each of the function execution completion before starting another, only one call stack is available in js engine so it is known as "SINGLE THREADED PROGRAMMING LANGUAGE" (IMP)
                    - Two Types of Functions can be handled by call stack
                       - Synchronous function : Function executes without any delay (console.log())
                       - Asynchronous function : Function executes with delay (Web API, Browser API)
                            - Browser API (setTimeOut, onclick etc) - Stored in Macro Task Queue
                            - Web API (Communication using network) - Stored in Micro Task Queue (Priority Queue)
                            - Event Loop - Manages flow of the code, Manages Asynchronous operations and user interaction without blocking main thread
                            - Macro Task Queue : Hold functions like setTimeOut, onclick etc, Event loop will handle this as First in First out(FIFO)
                            - Micro Task Queue : Hold functions like API, it is Priority queue, event lopp process all micro tasks after main loop
                - Heap : Storage for Variable and objects used by code

            - Working of JS : Js Engine parse code into machine codes, push functions to call stack, they execute one at a time.
            When encounter an Asynchronous function , it wil add callback to task queue, when stack become empty event-loop first process micro task queue. Event loop ensures code runs smoothly

    10. Handling Asynchronous Functions in JS
            - callback functions : it add delay to execute function
               - call back hell: Nesting of callback leads to 'callback hell', it wont complete the task
            - Promise : uesd to handle Asynchronous function and Return 2 states, Resolved state or Reject state
               - Resolved state means it handle/complete the function, to get Resolved state in js from Promise use 'then' method.Callback of 'then' will give response of Resolved state
               - Reject state means failed state, to get data from reject state use 'catch' method. Callback of 'catch' will give response of Reject state
            - Async - Await keyword : using them makes Asynchronous function handling without callbacks
               - async can be used along with functions, await can be used inside async functions
               - await is used for the completion of Asynchronous function execution
    11. API : Application Programming Interface
            - It is a medium used to make communication between different applications in internet 
            - Based on communication between apps we can classify api 
               - SOAP API (Client-Server Communication), Request HTTP, shared data in XML format(Simple Object Access Protocol)
               - REST API (Clinet-Server Communication), Request HTTP, shared data can be in any form
               - SOCKET IO (Messaging app)
               - GRAPH QL
    13. HTTP : HyperText Transfer Protocol
            - Enabling the transfer of data between client amd server, Data such as text,images,videos and other multimedia files can shared
            - Methods of HTTP request
                - GET : Used to retrieve data from a specified resource
                - POST : Used to submit/create data to be processed by a specified resource
                - PUT : Used to update completely a resource on the server
                - PATCH : Used to update partially a resource on the server
                - DELETE : Used to remove a specified resource from the server
            - Request : 2 parts 
                - Header part : used to define which type data in body, keep secret data
                - Body part : used to hold data to be shared with another apps
            - Types of data can be shared via http body
                - XML : Extensible Markup Languauge
                - JSON : JAVASCRIPT Object Notation, syntax : {"key":value}
                    - To convert json to js: JSON.parse()
                    - To convert js code to json : JSON.stringify()
            HTTP Response Staus code
                - 2xx : successfully completed
                - 4xx : failed due to client error
                - 5xx : failed due server error
                - 3xx : redirection 
                - 1xx : information
    14. URL : Uniform Resource Locator
            - Every site in internet has unique URl (scheme,Authority,path)
            - ex: https://jsonplaceholder.typicode.com/posts/1           
            - URI : Unifrom Resource Identifier  eg: posts
            - Parameters : Dynamically changed values in URL              

    15. API call in JAVASCRIPT
            - using 'XMLHttpRequest' class api call - AJAX call
                - AJAX : Asynchronous JAVASCRIPT XML
                - Working of API call using XMLHttpRequest
                    1. Create object for XMLHttpRequest class
                    2. Initialize request using 'open' method of XMLHttpRequest class
                    3. Send request using 'send' method of XMLHttpRequest class
                    4. To get response from XMLHttpRequest, 
                       - 'readystate' property defines response is ready or not, its values are vary from 1 to 4,
                       when it value become 4 then response is ready
                       - 'onreadystatechange' propery define 'readystate' is changed or not using function
                       - to view response use 'responseText' based on 'Status'
            - using 'fetch' (method) based on JAVASCRIPT 'Promise'
                - It works based on JAVASCRIPT 'promise'
                - After making api call using its response comes with a lot of information other than api result inorder to parse to get the response, use json() method which again returns a promise
                - to get api result using fetch we have to use 2 then methods
                - syntax : fetch(url, Request Initialization)
                - Request Initialization - optional
                its syntax is {method: "HTTP REQUEST", body: request body}

        -------------------------------------------
            REACT - ADVANCED FRONT END TECHNOLOGY
        -------------------------------------------
        1. front-end javascript library
        2. it is tool for building UI components
        3. Features of REACT 
            - Virtual DOM : React creates a VIRTUAL DOM in memory.Instead of manipulating the browser's DOM directly, React creates a virtual DOM in memory, where it does all the necessary manipulating, before making the changes in the browser DOM.
            - UI components : components are reusable pieces of codes.
            - JSX : JAVASCRIPT XML - JS extension for writing html codes, used to display browser contents
               - JSX are consists of JSX elements
               - Rules of JSX 
                  - Every JSX elements must be inside a single tag. That tag can be Container tags (div,section,article...) or react fragments, nameless tags are react fragments ( <></> )
                  - All JSX tag must has closing tag :
                      - Tag with contents : <tag>content</tag>
                      - Tag without contents : <tag></tag> or (self closing tags) - <tag/>
                      - All attributes and its values must be in camel case (fontSize) 
                  - In JSX, attribute like class is 'className' and instead of for use 'htmlFor'
                  - We can use js code directly in JSX, provide js code inside { js code }
            - Babel : used to convert jsx to html      
        4. React Project Creation : using vite  
           - npm create vite@latest Project-name -- --template react
           - To run react app using vite : npm run dev, generally we can view the output in localhost:5173
           - Files and Folder Structure of react app using vite
               - vite.config.js : vite configuratuion file for react app
               - README.md : Project documention file
               - package.json : configuratuion file for Project
               - package-lock.json : details of Version of packages installed in Project
               - gitignore : used to mention Files or Folders to be ignored in git 
               - eslint.config.js : configuratuion file for js code quality check
               - index.html : Entry point of app
               - node_modules folder : Holding copies of packages installed in the Project so that Project can package from node_modules instead  of internet, inorder to create node_modules in a Project using command : npm install
               - public : used to hold items that can be accepted from any where in Project
               - src folder : it is the folder where the react app logic is given
                   - main.jsx : used to display react app in browser
                       - createRoot() : create a root to display React components inside a browser DOM node.
                   - index.css : global css file
                   - App.jsx : it's a component file, which is the root component of react app
                   - App.css : css file for app.jsx
                   - asset folder: used to hold image, video... of a Project
        5. React app is collection of components and are arrangred in tree Structure, main root of react app is 'APP' component  
        6. React components : Set of reusable code for creating user interface of an app              
            - To create component : create a jsx/js file with file name starts with 'capital letter' (IMP)
            - can be of 2 types  
               - Function based/stateless component : uses js pure function and it return jsx
                   - - A Pure Function is a function (a block of code) that always returns the same result if the same arguments are passed. 
               - class based/statefull component : uses js class, it inherit react component
            - Life cycle methods of React component (class)
               - 1. Mounting Phase : Putting jsx into DOM
                   - constuctor()
                   - getDerivedStateFromProps()
                   - render()
                   - componentDidMount()
               - 2. Updating Phase : when component get update
                   - getDerivedStateFromProps()
                   - shouldComponentUpdate()
                   - render()
                   - getSnapShotBeforeUpdate()
                   - componentDidUpdate()
               - 3. Unmounting Phase : Removing from DOM
                   - componentWillUnmount()      
            - Difference btwn class and function baesd component
                     class based component                          functional component   
                 ---------------------------------------------------------------------------
                1. using class to create render method to       1. Using js pure functions, it retun jsx
            retun jsx
                2. Statefull component                          2. Stateless component
                3. Hooks not needed                             3. Hooks needed
                4. Need constructor                             4. No need constructor
                5. Lifecycle method are available               5. LC methods not available
        7. Styling react components
            - Using Inline css : using style attribute
                - syntax : style = {{property:value,...}}
            - Using External css : similar as css, add extra css file
            - using css module file : file with file extension as .module.css is known as css module file 
        8. Handling list of items in JSX : use map function to get each item from an array in jsx, key attribute is used to uniquely identify
        9. conditional Rendering : Based on condition, component can control visibility of jsx elements, use js conditional statements or Ternary operator in jsx       
        10. Event handling in React : Event={function-call}     
            - function call with no argument : event={function-name}
            - function call with argument : event={()=>function-name(arguments)}
            - function call with argument as event : event={(event)=>function-name(event)}
            (rfce/rcc)
        11. React State : its a variable used to store data, when state changes DOM also change
            - In class based component : use state property , can only assign object. To update state value use setState({key:updated-value})
        12. React Hooks : Hooks is a function used for giving react component Features(life cycle method & state) to functional component    
            - Rules for using hooks in functional component
               1. Import Hook
               2. used in top level of component
               3. Hooks cannot be conditional
            - common Predefined hooks
               - useState(initial-value) : used to create state in functional component, it can store any type of data, useState hook returns an array, its first argument will give you the state and second argument is a function used to update the state    
               - useRef() : Return object with one key as 'current', use 'Ref' attribute to jsx elements, current key has that jsx element, inorder to prevent unwanted Rendering
               - useEffect(callback,dependency) : used to provide side effects to component
                    - callback : it is a function used to define side effects
                    - dependency : it decide when side effects should be applied in component
                       - no argument : side effects will apply all time in component
                       - [] / empty array : side effects will Apply only at the creation/loading of component in browser
                       -[props/state/variable] : side effects will apply not only at the component creation but also changes of the array items[props,state,variable]
            - Custom Hooks : It should be a JS file and its file name should be start with 'use' keyword. Hook is a function, it must return data
                         
        13. Props : Used to share data from parent to child component, props is the argument of functional component, props is an object were its key is from its child selector property       
        14. Routing in React : React- Router DOM 
            - Setting path/url for component
            - use react-router-dom package : npm i react-router-dom
            - Steps for setting url/path for a component
               - 1. Entire react app must be render inside 'BrowserRouter' component
               - 2. components used to setup a path should be inside 'Routes' components
               - 3. To set a path/url for a component use 'Route' component and attributes like 'element' used to add component and 'path' used to add url
        15. Form Handling in REACT : store data inputed via from in component        
            - Controlled components : user input data will be stored in component state, using useState hook store data
            - Uncontrolled component : user input data will be fetched from real dom, here tag can directly access via 'useRef' hook 
        16. Handling API in react
            - fetch method
            - axios library